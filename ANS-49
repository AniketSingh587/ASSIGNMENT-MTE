public class IntersectionOfLinkedLists {

    static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

    public static ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) return null;
        
        ListNode a = headA;
        ListNode b = headB;
        
        // Traverse both lists; once we reach the end, start from the beginning of the other list
        while (a != b) {
            a = (a == null) ? headB : a.next;
            b = (b == null) ? headA : b.next;
        }
        
        return a;  // If a == b, either both are null or both are at the intersection node
    }

    public static void main(String[] args) {
        // Example to test the code
        ListNode headA = new ListNode(4);
        headA.next = new ListNode(1);
        headA.next.next = new ListNode(8);
        headA.next.next.next = new ListNode(4);
        headA.next.next.next.next = new ListNode(5);
        
        ListNode headB = new ListNode(5);
        headB.next = new ListNode(0);
        headB.next.next = new ListNode(1);
        headB.next.next.next = headA.next.next;  // Intersection at node with value 8
        
        ListNode intersection = getIntersectionNode(headA, headB);
        System.out.println(intersection != null ? intersection.val : "No intersection");
    }
}
